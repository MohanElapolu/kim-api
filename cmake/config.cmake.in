#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013--2019, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Richard Berger
#    Christoph Junghans
#    Ryan S. Elliott
#

#
# Release: This file is part of the kim-api-2.1.3 package.
#


# - KIM-API configuration
#
#  add_kim_api_imported_library()      - add kim-api library target
#  add_kim_api_model_library()         - set up kim-api model target
#  add_kim_api_model_driver_library()  - set up kim-api model driver target
#  add_kim_api_compiler_flags()        - set extra compile/link flags
#


include(FindPackageHandleStandardArgs)

if(TARGET kim-api)
  set(KIM_API_PROJECT_NAME @KIM_API_PROJECT_NAME@ CACHE STRING "KIM API project name string")
  set(KIM_API_VERSION @PROJECT_VERSION@ CACHE STRING "KIM API version")
  set(KIM_API_VERSION_STRING @PROJECT_VERSION_STRING@ CACHE STRING "KIM API version string")
  set(KIM_API_CMAKE_DIR ${CMAKE_SOURCE_DIR}/${KIM_API_CMAKE_DIR_IDENTIFIER} CACHE PATH "KIM API CMake dir")
  set(KIM_API_SHARED_LIBRARY_TEST_EXECUTABLE shared-library-test CACHE FILEPATH "KIM API shared library test")
  set(KIM_API_COLLECTIONS_INFO_EXECUTABLE "--empty--" CACHE FILEPATH "KIM API collections info executable") # invalid in build directory
  set(KIM_API_INSTALL_COLLECTION "SYSTEM" CACHE STRING "KIM API Collection to install item in")
  set_property(CACHE KIM_API_INSTALL_COLLECTION PROPERTY STRINGS SYSTEM USER ENVIRONMENT)
  string(REGEX REPLACE "^([^:]+).*" "\\1" KIM_API_MODEL_DRIVER_INSTALL_PREFIX "${KIM_API_SYSTEM_MODEL_DRIVERS_DIR}")
  set(KIM_API_MODEL_DRIVER_INSTALL_PREFIX "${KIM_API_MODEL_DRIVER_INSTALL_PREFIX}" CACHE PATH "KIM API Model Driver install prefix")
  string(REGEX REPLACE "^([^:]+).*" "\\1" KIM_API_PORTABLE_MODEL_INSTALL_PREFIX "${KIM_API_SYSTEM_PORTABLE_MODELS_DIR}")
  set(KIM_API_PORTABLE_MODEL_INSTALL_PREFIX "${KIM_API_PORTABLE_MODEL_INSTALL_PREFIX}" CACHE PATH "KIM API Portable Model install prefix")
  string(REGEX REPLACE "^([^:]+).*" "\\1" KIM_API_SIMULATOR_MODEL_INSTALL_PREFIX "${KIM_API_SYSTEM_SIMULATOR_MODELS_DIR}")
  set(KIM_API_SIMULATOR_MODEL_INSTALL_PREFIX "${KIM_API_SIMULATOR_MODEL_INSTALL_PREFIX}" CACHE PATH "KIM API Simulator Model install prefix")

  # handle the QUIETLY and REQUIRED arguments and set KIM-API_FOUND to TRUE
  # if all listed variables are TRUE
  find_package_handle_standard_args(KIM-API
    REQUIRED_VARS
      KIM_API_PROJECT_NAME
      KIM_API_VERSION
      KIM_API_VERSION_STRING
      KIM_API_CMAKE_DIR
      KIM_API_SHARED_LIBRARY_TEST_EXECUTABLE
      KIM_API_COLLECTIONS_INFO_EXECUTABLE
      KIM_API_INSTALL_COLLECTION
      KIM_API_MODEL_DRIVER_INSTALL_PREFIX
      KIM_API_PORTABLE_MODEL_INSTALL_PREFIX
      KIM_API_SIMULATOR_MODEL_INSTALL_PREFIX
    VERSION_VAR ${PROJECT_VERSION}
    )
  mark_as_advanced(
    KIM_API_PROJECT_NAME
    KIM_API_VERSION
    KIM_API_VERSION_STRING
    KIM_API_CMAKE_DIR
    KIM_API_SHARED_LIBRARY_TEST_EXECUTABLE
    KIM_API_COLLECTIONS_INFO_EXECUTABLE
    KIM_API_INSTALL_COLLECTION
    KIM_API_MODEL_DRIVER_INSTALL_PREFIX
    KIM_API_PORTABLE_MODEL_INSTALL_PREFIX
    KIM_API_SIMULATOR_MODEL_INSTALL_PREFIX
    )
else()
  # Language standards (also enforced with FLAGS below)
  #
  set(CMAKE_CXX_STANDARD @CMAKE_CXX_STANDARD@)
  set(CMAKE_CXX_STANDARD_REQUIRED @CMAKE_CXX_STANDARD_REQUIRED@)
  set(CMAKE_CXX_EXTENSIONS @CMAKE_CXX_EXTENSION@)
  #
  set(CMAKE_C_STANDARD @CMAKE_C_STANDARD@)
  set(CMAKE_C_STANDARD_REQUIRED @CMAKE_C_STANDARD_REQUIRED@)
  set(CMAKE_C_EXTENSIONS @CMAKE_C_EXTENSIONS@)
  #
  # NO similar setting exist yet in CMake for Fortran

  # RPATH settings
  #
  set(CMAKE_SKIP_BUILD_RPATH @CMAKE_SKIP_BUILD_RPATH@)
  set(CMAKE_BUILD_WITH_INSTALL_RPATH @CMAKE_BUILD_WITH_INSTALL_RPATH@)
  set(CMAKE_INSTALL_RPATH "@CMAKE_INSTALL_RPATH@")
  set(CMAKE_INSTALL_RPATH_USE_LINK_PATH @CMAKE_INSTALL_RPATH_USE_LINK_PATH@)


  # Basic CMAKE Build settings
  #
  set(CMAKE_BUILD_TYPE "@CMAKE_BUILD_TYPE@" CACHE STRING "Build Type")
  #
  set(CMAKE_CXX_COMPILER "@KIM_API_CMAKE_CXX_COMPILER@" CACHE FILEPATH "C++ compiler")
  set(KIM_API_CXX_FLAGS "@KIM_API_CXX_FLAGS@" CACHE STRING "KIM API C++ compiler flags")
  #
  set(CMAKE_C_COMPILER "@KIM_API_CMAKE_C_COMPILER@" CACHE FILEPATH "C compiler")
  set(KIM_API_C_FLAGS "@KIM_API_C_FLAGS@" CACHE STRING "KIM API C compiler flags")
  #
  set(CMAKE_Fortran_COMPILER "@KIM_API_CMAKE_Fortran_COMPILER@" CACHE FILEPATH "Fortran compiler")
  set(KIM_API_Fortran_FLAGS "@KIM_API_Fortran_FLAGS@" CACHE STRING "KIM API Fortran compiler flags")
  #
  set(CMAKE_POSITION_INDEPENDENT_CODE @CMAKE_POSITION_INDEPENDENT_CODE@)
  set(KIM_API_EXE_LINKER_FLAGS "@KIM_API_EXE_LINKER_FLAGS@" CACHE STRING "KIM API linker flags")


  set(KIM_API_PROJECT_NAME @KIM_API_PROJECT_NAME@ CACHE STRING "KIM API project name string")
  set(KIM_API_VERSION @PROJECT_VERSION@ CACHE STRING "KIM API version")
  set(KIM_API_VERSION_STRING @PROJECT_VERSION_STRING@ CACHE STRING "KIM API version string")

  set(KIM_API_CMAKE_DIR @CMAKE_INSTALL_FULL_LIBDIR@/@PROJECT_NAME@/@KIM_API_CMAKE_DIR_IDENTIFIER@ CACHE PATH "KIM API CMake dir")
  set(KIM_API_SHARED_LIBRARY_TEST_EXECUTABLE @CMAKE_INSTALL_FULL_LIBEXECDIR@/@PROJECT_NAME@/@PROJECT_NAME@-shared-library-test CACHE FILEPATH "KIM API shared library test")
  set(KIM_API_COLLECTIONS_INFO_EXECUTABLE @CMAKE_INSTALL_FULL_LIBEXECDIR@/@PROJECT_NAME@/@PROJECT_NAME@-collections-info CACHE FILEPATH "KIM API collections info executable")

  set(KIM_API_MODEL_DRIVER_IDENTIFIER @KIM_API_MODEL_DRIVER_IDENTIFIER@ CACHE INTERNAL "Model driver id")
  set(KIM_API_PORTABLE_MODEL_IDENTIFIER @KIM_API_PORTABLE_MODEL_IDENTIFIER@ CACHE INTERNAL "Portable Model id" )
  set(KIM_API_SIMULATOR_MODEL_IDENTIFIER @KIM_API_SIMULATOR_MODEL_IDENTIFIER@ CACHE INTERNAL "Simulator Model id")

  set(KIM_API_INSTALL_COLLECTION "SYSTEM" CACHE STRING "KIM API Collection to install item in")
  set_property(CACHE KIM_API_INSTALL_COLLECTION PROPERTY STRINGS SYSTEM USER ENVIRONMENT)

  if(KIM_API_INSTALL_COLLECTION STREQUAL "SYSTEM")
    execute_process(COMMAND ${KIM_API_COLLECTIONS_INFO_EXECUTABLE} system model_drivers    OUTPUT_VARIABLE MODEL_DRIVER_INSTALL_PREFIX OUTPUT_STRIP_TRAILING_WHITESPACE RESULT_VARIABLE _error)
    string(REGEX REPLACE "^([^\n]+)\n.*" "\\1" MODEL_DRIVER_INSTALL_PREFIX "${MODEL_DRIVER_INSTALL_PREFIX}")
    execute_process(COMMAND ${KIM_API_COLLECTIONS_INFO_EXECUTABLE} system portable_models  OUTPUT_VARIABLE PORTABLE_MODEL_INSTALL_PREFIX OUTPUT_STRIP_TRAILING_WHITESPACE RESULT_VARIABLE _error)
    string(REGEX REPLACE "^([^\n]+)\n.*" "\\1" PORTABLE_MODEL_INSTALL_PREFIX "${PORTABLE_MODEL_INSTALL_PREFIX}")
    execute_process(COMMAND ${KIM_API_COLLECTIONS_INFO_EXECUTABLE} system simulator_models OUTPUT_VARIABLE SIMULATOR_MODEL_INSTALL_PREFIX OUTPUT_STRIP_TRAILING_WHITESPACE RESULT_VARIABLE _error)
    string(REGEX REPLACE "^([^\n]+)\n.*" "\\1" SIMULATOR_MODEL_INSTALL_PREFIX "${SIMULATOR_MODEL_INSTALL_PREFIX}")
  elseif(KIM_API_INSTALL_COLLECTION STREQUAL "USER")
    execute_process(COMMAND ${KIM_API_COLLECTIONS_INFO_EXECUTABLE} config_file model_drivers    OUTPUT_VARIABLE MODEL_DRIVER_INSTALL_PREFIX OUTPUT_STRIP_TRAILING_WHITESPACE RESULT_VARIABLE _error)
    string(REGEX REPLACE "^([^\n]+)\n.*" "\\1" MODEL_DRIVER_INSTALL_PREFIX "${MODEL_DRIVER_INSTALL_PREFIX}")
    execute_process(COMMAND ${KIM_API_COLLECTIONS_INFO_EXECUTABLE} config_file portable_models  OUTPUT_VARIABLE PORTABLE_MODEL_INSTALL_PREFIX OUTPUT_STRIP_TRAILING_WHITESPACE RESULT_VARIABLE _error)
    string(REGEX REPLACE "^([^\n]+)\n.*" "\\1" PORTABLE_MODEL_INSTALL_PREFIX "${PORTABLE_MODEL_INSTALL_PREFIX}")
    execute_process(COMMAND ${KIM_API_COLLECTIONS_INFO_EXECUTABLE} config_file simulator_models OUTPUT_VARIABLE SIMULATOR_MODEL_INSTALL_PREFIX OUTPUT_STRIP_TRAILING_WHITESPACE RESULT_VARIABLE _error)
    string(REGEX REPLACE "^([^\n]+)\n.*" "\\1" SIMULATOR_MODEL_INSTALL_PREFIX "${SIMULATOR_MODEL_INSTALL_PREFIX}")
  elseif(KIM_API_INSTALL_COLLECTION STREQUAL "ENVIRONMENT")
    execute_process(COMMAND ${KIM_API_COLLECTIONS_INFO_EXECUTABLE} env model_drivers    OUTPUT_VARIABLE MODEL_DRIVER_INSTALL_PREFIX OUTPUT_STRIP_TRAILING_WHITESPACE RESULT_VARIABLE _error)
    string(REGEX REPLACE "^([^\n]+)\n.*" "\\1" MODEL_DRIVER_INSTALL_PREFIX "${MODEL_DRIVER_INSTALL_PREFIX}")
    if("${MODEL_DRIVER_INSTALL_PREFIX}" STREQUAL "")
      message(FATAL_ERROR "KIM API model driver environment variable is empty.")
    endif()
    execute_process(COMMAND ${KIM_API_COLLECTIONS_INFO_EXECUTABLE} env portable_models  OUTPUT_VARIABLE PORTABLE_MODEL_INSTALL_PREFIX OUTPUT_STRIP_TRAILING_WHITESPACE RESULT_VARIABLE _error)
    string(REGEX REPLACE "^([^\n]+)\n.*" "\\1" PORTABLE_MODEL_INSTALL_PREFIX "${PORTABLE_MODEL_INSTALL_PREFIX}")
    if("${PORTABLE_MODEL_INSTALL_PREFIX}" STREQUAL "")
      message(FATAL_ERROR "KIM API portable model environment variable is empty.")
    endif()
    execute_process(COMMAND ${KIM_API_COLLECTIONS_INFO_EXECUTABLE} env simulator_models OUTPUT_VARIABLE SIMULATOR_MODEL_INSTALL_PREFIX OUTPUT_STRIP_TRAILING_WHITESPACE RESULT_VARIABLE _error)
    string(REGEX REPLACE "^([^\n]+)\n.*" "\\1" SIMULATOR_MODEL_INSTALL_PREFIX "${SIMULATOR_MODEL_INSTALL_PREFIX}")
    if("${SIMULATOR_MODEL_INSTALL_PREFIX}" STREQUAL "")
      message(FATAL_ERROR "KIM API simulator model environment variable is empty.")
    endif()
  else()
    message(FATAL_ERROR "Unknown value of KIM_API_INSTALL_COLLECTION : ${KIM_API_INSTALL_COLLECTION}.")
  endif()
  #
  set(KIM_API_MODEL_DRIVER_INSTALL_PREFIX "${MODEL_DRIVER_INSTALL_PREFIX}" CACHE PATH "KIM API Model Driver install prefix")
  set(KIM_API_PORTABLE_MODEL_INSTALL_PREFIX "${PORTABLE_MODEL_INSTALL_PREFIX}" CACHE PATH "KIM API Portable Model install prefix")
  set(KIM_API_SIMULATOR_MODEL_INSTALL_PREFIX "${SIMULATOR_MODEL_INSTALL_PREFIX}" CACHE PATH "KIM API Simulator Model install prefix")


  # handle the QUIETLY and REQUIRED arguments and set KIM-API_FOUND to TRUE
  # if all listed variables are TRUE
  find_package_handle_standard_args(KIM-API
    REQUIRED_VARS
      KIM_API_PROJECT_NAME
      KIM_API_VERSION
      KIM_API_VERSION_STRING
      KIM_API_CMAKE_DIR
      KIM_API_SHARED_LIBRARY_TEST_EXECUTABLE
      KIM_API_COLLECTIONS_INFO_EXECUTABLE
      KIM_API_INSTALL_COLLECTION
      KIM_API_MODEL_DRIVER_INSTALL_PREFIX
      KIM_API_PORTABLE_MODEL_INSTALL_PREFIX
      KIM_API_SIMULATOR_MODEL_INSTALL_PREFIX
    VERSION_VAR ${KIM_API_VERSION}
    )
  mark_as_advanced(
    KIM_API_PROJECT_NAME
    KIM_API_VERSION
    KIM_API_VERSION_STRING
    KIM_API_CMAKE_DIR
    KIM_API_SHARED_LIBRARY_TEST_EXECUTABLE
    KIM_API_COLLECTIONS_INFO_EXECUTABLE
    KIM_API_INSTALL_COLLECTION
    KIM_API_MODEL_DRIVER_INSTALL_PREFIX
    KIM_API_PORTABLE_MODEL_INSTALL_PREFIX
    KIM_API_SIMULATOR_MODEL_INSTALL_PREFIX
    )
endif()


macro(add_kim_api_imported_library)
  add_library(kim-api SHARED IMPORTED)
  set_target_properties(kim-api PROPERTIES
    IMPORTED_LOCATION "@CMAKE_INSTALL_FULL_LIBDIR@/@CMAKE_SHARED_LIBRARY_PREFIX@@PROJECT_NAME@@CMAKE_SHARED_LIBRARY_SUFFIX@"
    INTERFACE_INCLUDE_DIRECTORIES
    "@CMAKE_INSTALL_FULL_INCLUDEDIR@/@PROJECT_NAME@;@CMAKE_INSTALL_FULL_LIBDIR@/@PROJECT_NAME@/@KIM_API_Fortran_MODULE_DIR_IDENTIFIER@"
    )
endmacro(add_kim_api_imported_library)

macro(update_compiler_flags_with_kim_api_values)
  set(CMAKE_CXX_FLAGS "${KIM_API_CXX_FLAGS} ${CMAKE_CXX_FLAGS}" PARENT_SCOPE)
  set(CMAKE_C_FLAGS "${KIM_API_C_FLAGS} ${CMAKE_C_FLAGS}" PARENT_SCOPE)
  set(CMAKE_Fortran_FLAGS "${KIM_API_Fortran_FLAGS} ${CMAKE_Fortran_FLAGS}" PARENT_SCOPE)
  set(CMAKE_EXE_LINKER_FLAGS "${KIM_API_EXE_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS}" PARENT_SCOPE)
endmacro(update_compiler_flags_with_kim_api_values)

function(add_kim_api_compiler_flags)
  update_compiler_flags_with_kim_api_values()
endfunction(add_kim_api_compiler_flags)

function(add_kim_api_model_library)
  set(options "")
  set(oneValueArgs NAME DRIVER_NAME CREATE_ROUTINE_NAME CREATE_ROUTINE_LANGUAGE SM_SPEC_FILE)
  set(multiValueArgs PARAMETER_FILES METADATA_FILES)
  cmake_parse_arguments(MODEL "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

  if("${MODEL_NAME}" STREQUAL "")
    message(FATAL_ERROR "No Model name provided")
  endif()

  if (NOT TARGET kim-api)
    update_compiler_flags_with_kim_api_values()
    add_kim_api_imported_library()
  endif()

  set(MODEL_SOURCES "")

  find_program(XXD_EXECUTABLE "xxd")
  find_package_handle_standard_args(XXD REQUIRED_VARS XXD_EXECUTABLE)
  if(NOT XXD_FOUND)
    message(FATAL_ERROR "The xxd utility is required to build models and drivers.")
  endif()

  if(MODEL_SM_SPEC_FILE)
    set(ITEM_NAME "\"${MODEL_NAME}\"")
    set(ITEM_DRIVER_NAME "NULL")
    set(ITEM_SM_SPEC_FILE "\"${MODEL_SM_SPEC_FILE}\"")
    set(CREATE_ROUTINE_DECLARATION "")
    set(CREATE_ROUTINE_NAME "NULL")
    set(CREATE_ROUTINE_LANGUAGE "cpp")
    set(ITEM_TYPE "simulatorModel")

    string(MAKE_C_IDENTIFIER ${MODEL_SM_SPEC_FILE} CFNAME)
    if (${CFNAME} MATCHES "^_[0-9].*")  # Fixup difference between MAKE_C_IDENTIFER and xxd
      set(CFNAME "_${CFNAME}")
    endif()
    set(EMBEDDED_SM_SPEC_FILE "extern unsigned int const ${CFNAME}_len;\n")
    set(EMBEDDED_SM_SPEC_FILE "${EMBEDDED_SM_SPEC_FILE}extern unsigned char const ${CFNAME}[];\n")
    set(EMBEDDED_SM_SPEC_FILE "${EMBEDDED_SM_SPEC_FILE}static SharedLibrarySchemaV2::EmbeddedFile const simulatorModelSpecificationFile =\n")
    set(EMBEDDED_SM_SPEC_FILE "${EMBEDDED_SM_SPEC_FILE}  {\"${MODEL_SM_SPEC_FILE}\", ${CFNAME}_len, ${CFNAME}};\n")
    set(EMBEDDED_SM_SPEC_FILE_IDENTIFIER "&simulatorModelSpecificationFile")
    set(SM_SPEC_FILE_IN "${CMAKE_CURRENT_SOURCE_DIR}/${MODEL_SM_SPEC_FILE}")
    set(SM_SPEC_FILE "${CMAKE_CURRENT_BINARY_DIR}/${MODEL_SM_SPEC_FILE}.c")
    list(APPEND MODEL_SOURCES ${SM_SPEC_FILE})
    add_custom_command(OUTPUT ${SM_SPEC_FILE}
      COMMAND ${XXD_EXECUTABLE} -i "${MODEL_SM_SPEC_FILE}" "${SM_SPEC_FILE}"
      DEPENDS ${SM_SPEC_FILE_IN}
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
      )
  elseif(MODEL_PARAMETER_FILES)
    if("${MODEL_DRIVER_NAME}" STREQUAL "")
      message(FATAL_ERROR "No Parameterized Model driver name provided")
    endif()

    set(ITEM_NAME "\"${MODEL_NAME}\"")
    set(ITEM_DRIVER_NAME "\"${MODEL_DRIVER_NAME}\"")
    set(ITEM_SM_SPEC_FILE "NULL")
    set(CREATE_ROUTINE_DECLARATION "")
    set(CREATE_ROUTINE_NAME "NULL")
    set(CREATE_ROUTINE_LANGUAGE "cpp")
    set(ITEM_TYPE "portableModel")
    set(EMBEDDED_SM_SPEC_FILE_IDENTIFIER "NULL")
  else()
    if(MODEL_DRIVER_NAME)
      message(FATAL_ERROR "Stand-Alone Model may not have a Model Driver")
    endif()
    if(MODEL_PARAMETER_FILES)
      message(FATAL_ERROR "Stand-Alone Model may not include parameter files")
    endif()
    if("${MODEL_CREATE_ROUTINE_NAME}" STREQUAL "")
      message(FATAL_ERROR "No Stand-Alone Model create routine name provided")
    endif()
    if("${MODEL_CREATE_ROUTINE_LANGUAGE}" STREQUAL "")
      message(FATAL_ERROR "No Stand-Alone Model create routine language provided")
    endif()

    set(ITEM_NAME "\"${MODEL_NAME}\"")
    set(ITEM_DRIVER_NAME "NULL")
    set(ITEM_METADATA_FILE "NULL")
    if ("${MODEL_CREATE_ROUTINE_LANGUAGE}" STREQUAL "cpp")
      set(CREATE_ROUTINE_DECLARATION "KIM::ModelCreateFunction ${MODEL_CREATE_ROUTINE_NAME};")
    elseif("${MODEL_CREATE_ROUTINE_LANGUAGE}" STREQUAL "c")
      set(CREATE_ROUTINE_DECLARATION "KIM_ModelCreateFunction ${MODEL_CREATE_ROUTINE_NAME};")
    elseif("${MODEL_CREATE_ROUTINE_LANGUAGE}" STREQUAL "fortran")
      set(CREATE_ROUTINE_DECLARATION
        "void ${MODEL_CREATE_ROUTINE_NAME}(KIM_ModelCreate *, KIM_LengthUnit, KIM_EnergyUnit, KIM_ChargeUnit, KIM_TemperatureUnit, KIM_TimeUnit, int *);")
    else()
      message(FATAL_ERROR "Invalid Model Create Function Language.")
    endif()
    set(CREATE_ROUTINE_NAME ${MODEL_CREATE_ROUTINE_NAME})
    set(CREATE_ROUTINE_LANGUAGE ${MODEL_CREATE_ROUTINE_LANGUAGE})
    set(ITEM_TYPE "portableModel")
    set(EMBEDDED_SM_SPEC_FILE_IDENTIFIER "NULL")
  endif()

  # process parameter files
  set(PARAMETER_FILE_DECLARATIONS "")
  set(EMBEDDED_PARAMETER_FILES "")
  set(EMBEDDED_PARAMETER_FILES_IDENTIFIER "NULL")
  foreach(FNAME ${MODEL_PARAMETER_FILES})
    string(MAKE_C_IDENTIFIER ${FNAME} CFNAME)
    if (${CFNAME} MATCHES "^_[0-9].*")  # Fixup difference between MAKE_C_IDENTIFER and xxd
      set(CFNAME "_${CFNAME}")
    endif()
    if("${PARAMETER_FILE_DECLARATIONS}" STREQUAL "")
      set(PARAMETER_FILE_DECLARATIONS "extern unsigned int const ${CFNAME}_len;\n")
      set(PARAMETER_FILE_DECLARATIONS "${PARAMETER_FILE_DECLARATIONS}extern unsigned char const ${CFNAME}[];")
      set(EMBEDDED_PARAMETER_FILES "static SharedLibrarySchemaV2::EmbeddedFile const parameterFiles[] = {\n")
      set(EMBEDDED_PARAMETER_FILES "${EMBEDDED_PARAMETER_FILES}  {\"${FNAME}\", ${CFNAME}_len, ${CFNAME}}")
      set(EMBEDDED_PARAMETER_FILES_IDENTIFIER "parameterFiles")
    else()
      set(PARAMETER_FILE_DECLARATIONS "${PARAMETER_FILE_DECLARATIONS}\nextern unsigned int const ${CFNAME}_len;\n")
      set(PARAMETER_FILE_DECLARATIONS "${PARAMETER_FILE_DECLARATIONS}extern unsigned char const ${CFNAME}[];")
      set(EMBEDDED_PARAMETER_FILES "${EMBEDDED_PARAMETER_FILES},\n  {\"${FNAME}\", ${CFNAME}_len, ${CFNAME}}")
    endif()
    set(PARAM_FILE_IN "${CMAKE_CURRENT_SOURCE_DIR}/${FNAME}")
    set(PARAM_FILE "${CMAKE_CURRENT_BINARY_DIR}/${FNAME}.c")
    list(APPEND MODEL_SOURCES ${PARAM_FILE})
    add_custom_command(OUTPUT ${PARAM_FILE}
      COMMAND ${XXD_EXECUTABLE} -i "${FNAME}" "${PARAM_FILE}"
      DEPENDS ${PARAM_FILE_IN}
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
      )
  endforeach()
  list(LENGTH MODEL_PARAMETER_FILES NUMBER_OF_PARAMETER_FILES)
  if(NUMBER_OF_PARAMETER_FILES GREATER 0)
    set(EMBEDDED_PARAMETER_FILES "${EMBEDDED_PARAMETER_FILES} };")
  endif()

  configure_file(${KIM_API_CMAKE_DIR}/item-info.txt.in ${CMAKE_CURRENT_BINARY_DIR}/item-info.txt @ONLY)
  configure_file(${KIM_API_CMAKE_DIR}/item-compiled-with-version.txt.in ${CMAKE_CURRENT_BINARY_DIR}/item-compiled-with-version.txt @ONLY)

  # process metadata files
  list(APPEND METADATA_LOCAL_FILES "item-compiled-with-version.txt")
  list(INSERT MODEL_METADATA_FILES 0 "${METADATA_LOCAL_FILES}")
  #
  file(GLOB KIM_STANDARD_METADATA_FILES
    LIST_DIRECTORIES false
    RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}"
    "kimspec.edn" "kimprovenance.edn" "kimcite-*.bib")
  if(KIM_STANDARD_METADATA_FILES)
    list(APPEND MODEL_METADATA_FILES "${KIM_STANDARD_METADATA_FILES}")
  endif()
  #
  set(METADATA_FILE_DECLARATIONS "")
  set(EMBEDDED_METADATA_FILES "")
  set(EMBEDDED_METADATA_FILES_IDENTIFIER "NULL")
  foreach(FNAME ${MODEL_METADATA_FILES})
    string(MAKE_C_IDENTIFIER ${FNAME} CFNAME)
    if (${CFNAME} MATCHES "^_[0-9].*")  # Fixup difference between MAKE_C_IDENTIFER and xxd
      set(CFNAME "_${CFNAME}")
    endif()
    if("${METADATA_FILE_DECLARATIONS}" STREQUAL "")
      set(METADATA_FILE_DECLARATIONS "extern unsigned int const ${CFNAME}_len;\n")
      set(METADATA_FILE_DECLARATIONS "${METADATA_FILE_DECLARATIONS}extern unsigned char const ${CFNAME}[];")
      set(EMBEDDED_METADATA_FILES "static SharedLibrarySchemaV2::EmbeddedFile const metadataFiles[] = {\n")
      set(EMBEDDED_METADATA_FILES "${EMBEDDED_METADATA_FILES}  {\"${FNAME}\", ${CFNAME}_len, ${CFNAME}}")
      set(EMBEDDED_METADATA_FILES_IDENTIFIER "metadataFiles")
    else()
      set(METADATA_FILE_DECLARATIONS "${METADATA_FILE_DECLARATIONS}\nextern unsigned int const ${CFNAME}_len;\n")
      set(METADATA_FILE_DECLARATIONS "${METADATA_FILE_DECLARATIONS}extern unsigned char const ${CFNAME}[];")
      set(EMBEDDED_METADATA_FILES "${EMBEDDED_METADATA_FILES},\n  {\"${FNAME}\", ${CFNAME}_len, ${CFNAME}}")
    endif()
    list(FIND METADATA_LOCAL_FILES "${FNAME}" FNAME_IS_LOCAL)
    if(FNAME_IS_LOCAL EQUAL -1)
      set(FNAME_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
    else()
      set(FNAME_DIR "${CMAKE_CURRENT_BINARY_DIR}")
    endif()
    set(METADATA_FILE_IN "${FNAME_DIR}/${FNAME}")
    set(METADATA_FILE "${CMAKE_CURRENT_BINARY_DIR}/${FNAME}.c")
    list(APPEND MODEL_SOURCES ${METADATA_FILE})
    add_custom_command(OUTPUT ${METADATA_FILE}
      COMMAND ${XXD_EXECUTABLE} -i "${FNAME}" "${METADATA_FILE}"
      DEPENDS ${METADATA_FILE_IN}
      WORKING_DIRECTORY ${FNAME_DIR}
      )
  endforeach()
  list(LENGTH MODEL_METADATA_FILES NUMBER_OF_METADATA_FILES)
  if(NUMBER_OF_METADATA_FILES GREATER 0)
    set(EMBEDDED_METADATA_FILES "${EMBEDDED_METADATA_FILES} };")
  endif()

  configure_file(${KIM_API_CMAKE_DIR}/item-wrapper.cpp.in ${CMAKE_CURRENT_BINARY_DIR}/item-wrapper.cpp @ONLY)
  list(APPEND MODEL_SOURCES ${CMAKE_CURRENT_BINARY_DIR}/item-wrapper.cpp)

  add_library(${MODEL_NAME} MODULE ${MODEL_SOURCES})
  target_include_directories(${MODEL_NAME} PRIVATE ${KIM_API_CMAKE_DIR})
  target_link_libraries(${MODEL_NAME} kim-api)

  if(NOT ITEM_TYPE STREQUAL "simulatorModel")
    set_target_properties(${MODEL_NAME} PROPERTIES OUTPUT_NAME "${PROJECT_NAME}-${KIM_API_PORTABLE_MODEL_IDENTIFIER}"
      LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${MODEL_NAME})
    install(TARGETS ${MODEL_NAME} LIBRARY DESTINATION "${KIM_API_PORTABLE_MODEL_INSTALL_PREFIX}/${MODEL_NAME}")
  else()
    set_target_properties(${MODEL_NAME} PROPERTIES OUTPUT_NAME "${PROJECT_NAME}-${KIM_API_SIMULATOR_MODEL_IDENTIFIER}"
      LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${MODEL_NAME})
    install(TARGETS ${MODEL_NAME} LIBRARY DESTINATION "${KIM_API_SIMULATOR_MODEL_INSTALL_PREFIX}/${MODEL_NAME}")
  endif()

  add_test(NAME shared_library_test_${MODEL_NAME} COMMAND ${KIM_API_SHARED_LIBRARY_TEST_EXECUTABLE} $<TARGET_FILE:${MODEL_NAME}>)
endfunction(add_kim_api_model_library)

function(add_kim_api_model_driver_library)
  set(options "")
  set(oneValueArgs NAME CREATE_ROUTINE_NAME CREATE_ROUTINE_LANGUAGE)
  set(multiValueArgs METADATA_FILES)
  cmake_parse_arguments(MODEL_DRIVER "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

  if("${MODEL_DRIVER_NAME}" STREQUAL "")
    message(FATAL_ERROR "No Model Driver name provided")
  endif()
  if("${MODEL_DRIVER_CREATE_ROUTINE_NAME}" STREQUAL "")
    message(FATAL_ERROR "No Model Driver create routine name provided")
  endif()
  if("${MODEL_DRIVER_CREATE_ROUTINE_LANGUAGE}" STREQUAL "")
    message(FATAL_ERROR "No Model Driver create routine language provided")
  endif()

  if (NOT TARGET kim-api)
    update_compiler_flags_with_kim_api_values()
    add_kim_api_imported_library()
  endif()

  set(MODEL_DRIVER_SOURCES "")

  find_program(XXD_EXECUTABLE "xxd")
  find_package_handle_standard_args(XXD REQUIRED_VARS XXD_EXECUTABLE)
  if(NOT XXD_FOUND)
    message(FATAL_ERROR "The xxd utility is required to build models and drivers.")
  endif()

  if ("${MODEL_DRIVER_CREATE_ROUTINE_LANGUAGE}" STREQUAL "cpp")
    set(CREATE_ROUTINE_DECLARATION "KIM::ModelDriverCreateFunction ${MODEL_DRIVER_CREATE_ROUTINE_NAME};")
  elseif("${MODEL_DRIVER_CREATE_ROUTINE_LANGUAGE}" STREQUAL "c")
    set(CREATE_ROUTINE_DECLARATION "KIM_ModelDriverCreateFunction ${MODEL_DRIVER_CREATE_ROUTINE_NAME};")
  elseif("${MODEL_DRIVER_CREATE_ROUTINE_LANGUAGE}" STREQUAL "fortran")
    set(CREATE_ROUTINE_DECLARATION
      "void ${MODEL_DRIVER_CREATE_ROUTINE_NAME}(KIM_ModelDriverCreate *, KIM_LengthUnit, KIM_EnergyUnit, KIM_ChargeUnit, KIM_TemperatureUnit, KIM_TimeUnit, int *);")
  else()
    message(FATAL_ERROR "Invalid Model Driver Create Function Language.")
  endif()
  set(CREATE_ROUTINE_NAME "${MODEL_DRIVER_CREATE_ROUTINE_NAME}")
  set(CREATE_ROUTINE_LANGUAGE ${MODEL_DRIVER_CREATE_ROUTINE_LANGUAGE})

  set(ITEM_TYPE "modelDriver")
  set(ITEM_NAME "\"${MODEL_DRIVER_NAME}\"")
  set(ITEM_DRIVER_NAME "NULL")
  set(PARAMETER_FILE_DECLARATIONS "")
  set(NUMBER_OF_PARAMETER_FILES 0)
  set(EMBEDDED_PARAMETER_FILES "")
  set(EMBEDDED_PARAMETER_FILES_IDENTIFIER "NULL")
  set(EMBEDDED_SM_SPEC_FILE "")
  set(EMBEDDED_SM_SPEC_FILE_IDENTIFIER "NULL")

  configure_file(${KIM_API_CMAKE_DIR}/item-info.txt.in ${CMAKE_CURRENT_BINARY_DIR}/item-info.txt @ONLY)
  configure_file(${KIM_API_CMAKE_DIR}/item-compiled-with-version.txt.in ${CMAKE_CURRENT_BINARY_DIR}/item-compiled-with-version.txt @ONLY)

  # process metadata files
  list(APPEND METADATA_LOCAL_FILES "item-compiled-with-version.txt")
  list(INSERT MODEL_DRIVER_METADATA_FILES 0 "${METADATA_LOCAL_FILES}")
  #
  file(GLOB KIM_STANDARD_METADATA_FILES
    LIST_DIRECTORIES false
    RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}"
    "kimspec.edn" "kimprovenance.edn" "kimcite-*.bib")
  if(KIM_STANDARD_METADATA_FILES)
    list(APPEND MODEL_DRIVER_METADATA_FILES "${KIM_STANDARD_METADATA_FILES}")
  endif()
  #
  set(METADATA_FILE_DECLARATIONS "")
  set(EMBEDDED_METADATA_FILES "")
  set(EMBEDDED_METADATA_FILES_IDENTIFIER "NULL")
  foreach(FNAME ${MODEL_DRIVER_METADATA_FILES})
    string(MAKE_C_IDENTIFIER ${FNAME} CFNAME)
    if (${CFNAME} MATCHES "^_[0-9].*")  # Fixup difference between MAKE_C_IDENTIFER and xxd
      set(CFNAME "_${CFNAME}")
    endif()
    if("${METADATA_FILE_DECLARATIONS}" STREQUAL "")
      set(METADATA_FILE_DECLARATIONS "extern unsigned int const ${CFNAME}_len;\n")
      set(METADATA_FILE_DECLARATIONS "${METADATA_FILE_DECLARATIONS}extern unsigned char const ${CFNAME}[];")
      set(EMBEDDED_METADATA_FILES "static SharedLibrarySchemaV2::EmbeddedFile const metadataFiles[] = {\n")
      set(EMBEDDED_METADATA_FILES "${EMBEDDED_METADATA_FILES}  {\"${FNAME}\", ${CFNAME}_len, ${CFNAME}}")
      set(EMBEDDED_METADATA_FILES_IDENTIFIER "metadataFiles")
    else()
      set(METADATA_FILE_DECLARATIONS "${METADATA_FILE_DECLARATIONS}\nextern unsigned int const ${CFNAME}_len;\n")
      set(METADATA_FILE_DECLARATIONS "${METADATA_FILE_DECLARATIONS}extern unsigned char const ${CFNAME}[];")
      set(EMBEDDED_METADATA_FILES "${EMBEDDED_METADATA_FILES},\n  {\"${FNAME}\", ${CFNAME}_len, ${CFNAME}}")
    endif()
    list(FIND METADATA_LOCAL_FILES "${FNAME}" FNAME_IS_LOCAL)
    if(FNAME_IS_LOCAL EQUAL -1)
      set(FNAME_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
    else()
      set(FNAME_DIR "${CMAKE_CURRENT_BINARY_DIR}")
    endif()
    set(METADATA_FILE_IN "${FNAME_DIR}/${FNAME}")
    set(METADATA_FILE "${CMAKE_CURRENT_BINARY_DIR}/${FNAME}.c")
    list(APPEND MODEL_DRIVER_SOURCES ${METADATA_FILE})
    add_custom_command(OUTPUT ${METADATA_FILE}
      COMMAND ${XXD_EXECUTABLE} -i "${FNAME}" "${METADATA_FILE}"
      DEPENDS ${METADATA_FILE_IN}
      WORKING_DIRECTORY ${FNAME_DIR}
      )
  endforeach()
  list(LENGTH MODEL_DRIVER_METADATA_FILES NUMBER_OF_METADATA_FILES)
  if(NUMBER_OF_METADATA_FILES GREATER 0)
    set(EMBEDDED_METADATA_FILES "${EMBEDDED_METADATA_FILES} };")
  endif()

  configure_file(${KIM_API_CMAKE_DIR}/item-wrapper.cpp.in ${CMAKE_CURRENT_BINARY_DIR}/item-wrapper.cpp @ONLY)
  list(APPEND MODEL_DRIVER_SOURCES ${CMAKE_CURRENT_BINARY_DIR}/item-wrapper.cpp)

  add_library(${MODEL_DRIVER_NAME} MODULE ${MODEL_DRIVER_SOURCES})
  set_target_properties(${MODEL_DRIVER_NAME} PROPERTIES OUTPUT_NAME "${PROJECT_NAME}-${KIM_API_MODEL_DRIVER_IDENTIFIER}"
    LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${MODEL_DRIVER_NAME})
  target_include_directories(${MODEL_DRIVER_NAME} PRIVATE ${KIM_API_CMAKE_DIR})
  target_link_libraries(${MODEL_DRIVER_NAME} kim-api)

  install(TARGETS ${MODEL_DRIVER_NAME} LIBRARY DESTINATION "${KIM_API_MODEL_DRIVER_INSTALL_PREFIX}/${MODEL_DRIVER_NAME}")

  add_test(NAME shared_library_test_${MODEL_DRIVER_NAME} COMMAND ${KIM_API_SHARED_LIBRARY_TEST_EXECUTABLE} $<TARGET_FILE:${MODEL_DRIVER_NAME}>)
endfunction(add_kim_api_model_driver_library)
